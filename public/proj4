#!/usr/bin/env python

from main import PKT_DIR_INCOMING, PKT_DIR_OUTGOING
import socket
import struct

# TODO: Feel free to import any Python standard moduless as necessary.
# (http://docs.python.org/2/library/)
# You must NOT use any 3rd-party libraries.

class Firewall:
    def __init__(self, config, iface_int, iface_ext):
        self.iface_int = iface_int
        self.iface_ext = iface_ext
	self.wall_rules = open(config['rule'], 'r')
	self.geo = []
	self.TCP_rules = []
	self.UDP_rules = []
	self.ICMP_rules = []
	with open(config['rule'], 'r') as file:
		for line in file:
			if line[0] != "\n" and line[0] != '%':
				if line[5].upper() == 'T' and line[6].upper() == 'C' and line[7].upper() == 'P':
					self.TCP_rules.append(line)
				if line[5].upper() == 'U' and line[6].upper() == 'D' and line[7].upper() == 'P':
					self.UDP_rules.append(line)
				if line[5].upper() == 'I' and line[6].upper() == 'C' and line[7].upper() == 'M' and line[8].upper() == 'P':	
					self.ICMP_rules.append(line)
				if line[5].upper() == 'D' and line[6].upper() == 'N' and line[7].upper() == 'S':
					self.UDP_rules.append(line)

	with open('geoipdb.txt', 'r') as file2:
		for line2 in file2:
			self.geo.append(line2)
   
    # @pkt_dir: either PKT_DIR_INCOMING or PKT_DIR_OUTGOING
    # @pkt: the actual data of the IPv4 packet (including IP header)
    def handle_packet(self, pkt_dir, pkt):
	try:
		domain_name = ''
		DNS = False
		IHL = ord(pkt[0]) & 0x0f
	      	if IHL < 5:
			return
		protocol = ord(pkt[9])
		if protocol != 6 and protocol != 17 and protocol != 1:
			if pkt_dir == PKT_DIR_INCOMING:
				self.iface_int.send_ip_packet(pkt)
				return
			else:
				self.iface_ext.send_ip_packet(pkt)
				return
		if pkt_dir == PKT_DIR_OUTGOING:
			external_address = socket.inet_ntoa(pkt[16:20])
		else:
			external_address = socket.inet_ntoa(pkt[12:16])
		if protocol == 6 or protocol == 17:
			if pkt_dir == PKT_DIR_OUTGOING:
				external_port = struct.unpack('!H', pkt[IHL*4 + 2: IHL*4 + 4])[0]
			else:
				external_port = struct.unpack('!H', pkt[IHL*4: IHL*4 + 2])[0]
			if protocol == 17:
				DNS_offset = IHL*4 + 8
				question_offset = DNS_offset + 12
				if pkt[question_offset:]:
					length_qname = 0
					while ord(pkt[question_offset + length_qname: question_offset + length_qname + 1]) != 0:
						length_qname += 1
					length_qname += 1
					QType_offset = question_offset + length_qname
					QDCount = struct.unpack('!H', pkt[DNS_offset + 4 : DNS_offset + 6])[0]
					QType = struct.unpack('!H', pkt[QType_offset : QType_offset + 2])[0]
					QClass = struct.unpack('!H', pkt[QType_offset + 2 : QType_offset + 4])[0]
					if pkt_dir == PKT_DIR_OUTGOING and QDCount == 1 and (QType == 1 or QType == 28) and QClass == 1 and external_port == 53:
						DNS = True
						domain_name = ''
						new_offset = question_offset
						while 1:
							length_byte = ord(pkt[new_offset])
							if length_byte == 0:
								break
							count = 1
							length_qname -= 1
							while length_byte > 0:
								domain_name += pkt[new_offset + count]
								count += 1
								length_byte -= 1
								length_qname -= 1
							new_offset += count
							if length_qname > 1:
								domain_name += '.'	
	
		if protocol == 1:
			external_port = ord(pkt[IHL])
		deny_pass = self.handle_rules(protocol, external_address, external_port, domain_name, DNS)
		if deny_pass == True:
			if pkt_dir == PKT_DIR_INCOMING: 
				self.iface_int.send_ip_packet(pkt)
			else:
				self.iface_ext.send_ip_packet(pkt)
		elif deny_pass == False:
			return
	except (socket.error, struct.error, IndexError, KeyError, TypeError, ValueError, UnboundLocalError):
		print("mistakes were made")
		return
    def handle_rules(self, protocol, external_address, external_port, domain_name, DNS):
	matches_DNS = False
	if protocol == 17:
		rules = list(self.UDP_rules)
		while len(rules) > 0:
			rule = rules.pop()
			rule_split = rule.lower().split()
			if DNS == True:
				if rule_split[2] == domain_name:
					matches_DNS = True
				elif '*' in rule_split[2]:
					DNS_name = rule_split[2].replace('*', '')
					if domain_name.endswith(DNS_name):
						matches_DNS = True	
			matches_port = False
			matches_address = False
			if rule_split[2] == 'any' or external_address == rule_split[2]:
				matches_address = True
			elif '/' in rule_split[2]:
				address = struct.unpack('!L', socket.inet_aton(external_address))[0]
				interpret = rule_split[2].split('/')
				network_prefix, mask_bits = interpret[0], interpret[1]
				address2 = struct.unpack('!L', socket.inet_aton(network_prefix))[0]
				netmask = ~((1 << 32 - int(mask_bits)) - 1)
				if address & netmask == address2 & netmask:
					matches_address = True
			elif rule_split[2] != 'any' and rule_split[2].isalpha():
				matches_address = self.bin_geo_search(rule_split[2], external_address, 0, len(self.geo) - 1)
			if len(rule_split) == 4:
				if rule_split[3] == 'any' or rule_split[3] == str(external_port):
					matches_port = True
				elif '-' in rule_split[3]:
					port_range = rule_split[3].split('-')
					if external_port in range(int(port_range[0]), int(port_range[1]) + 1):
						matches_port = True 
			if matches_port == True and matches_address == True:
				if rule_split[0] == 'drop':
					return False
				return True
			if DNS == True and matches_DNS == True:
				if rule_split[0] == 'drop':
					return False
				return True
			else:
				continue
		return True
	else:
		if protocol == 1:
			rules2 = list(self.ICMP_rules)
		else:
			rules2 = list(self.TCP_rules)
		while len(rules2) > 0:
			rule = rules2.pop()
			rule_split = rule.lower().split()
			matches_port = False
			matches_address = False
			if rule_split[2] == 'any' or external_address == rule_split[2]:
				matches_address = True
			elif '/' in rule_split[2]:
				address = struct.unpack('!L', socket.inet_aton(external_address))[0]
				interpret = rule_split[2].split('/')
				network_prefix, mask_bits = interpret[0], interpret[1]
				address2 = struct.unpack('!L', socket.inet_aton(network_prefix))[0]
				netmask = ~((1 << 32 - int(mask_bits)) - 1)
				if address & netmask == address2 & netmask:
					matches_address = True
			elif rule_split[2] != 'any' and rule_split[2].isalpha():
				matches_address = self.bin_geo_search(rule_split[2], external_address, 0, len(self.geo) - 1)
			if rule_split[3] == 'any' or rule_split[3] == str(external_port):
				matches_port = True
			elif '-' in rule_split[3]:
				port_range = rule_split[3].split('-')
				if external_port in range(int(port_range[0]), int(port_range[1]) + 1):
					matches_port = True 
			if matches_port == True and matches_address == True:
				if rule_split[0] == 'drop':
					return False
				return True
			else:
				continue
		return True		
				
    def bin_geo_search(self, country, address, first, last):
	if first > last:
		return False
	middle = (first + last) // 2
	address_range = self.geo[middle].split()
	low = self.sorry_inet_aton(address_range[0])
	high = self.sorry_inet_aton(address_range[1])
	compare = self.sorry_inet_aton(address)
	if compare >= low and compare <= high:
		if address_range[2].upper() == country.upper():
			return True
		return False
	elif compare < low:
		return self.bin_geo_search(country, address, first, middle - 1)
	else:
		return self.bin_geo_search(country, address, middle + 1, last)

    def sorry_inet_aton(self, address):
	num = address.split('.')
	return int(num[3]) + 1000 * int(num[2]) + 1000000 * int(num[1]) + 1000000000 * int(num[0])

    def make_RST(self, pkt, header_offset, pkt_direction):
	RST_packet = ''
	RST_packet += struct.pack('!B', 0x45)
	RST_packet += pkt[1]
	RST_packet += struct.pack('!H', 0x28)
	RST_packet += pkt[4:8]
	#RST_packet += struct.pack('!B', 0x80)
	#RST_packet += struct.pack('!B', 0x6)
	#RST_packet += struct.pack('!H', 0x0)
	RST_packet += struct.pack('!L', 0x80060000)
	RST_packet += pkt[16:20]
	RST_packet += pkt[12:16]
	checksum = self.calc_checksum(20, RST_packet)
	RST_packet = RST_packet[0:10] + checksum + RST_packet[12:20]
	TCP = ''
	TCP += pkt[header_offset+2:header_offset+4]
	TCP += pkt[header_offset:header_offset+2]
	TCP += struct.pack('!L', 0x0)
	sequence_number = struct.unpack('!L', pkt[header_offset + 4: header_offset + 8])[0]
	sequence_number += 1
	sequence_number = struct.pack('!L', sequence_number)
	TCP += sequence_number
	TCP += struct.pack('!L', 0x50140000)
	TCP += struct.pack('!L', 0x0)
	RST_packet += TCP
	pseudoheader = ''
	pseudoheader += RST_packet[16:20]
	pseudoheader += RST_packet[12:16]
	pseudoheader += struct.pack('!H', 0x0006)
	pseudoheader += struct.pack('!H', 0x14)
	pseudoheader += TCP
	checksum2 = self.calc_checksum(32, pseudoheader)
	RST_packet = RST_packet[0:36] + checksum2 + RST_packet[38:40]
	if pkt_direction == PKT_DIR_INCOMING:
		self.iface_int.send_ip_packet(RST_packet)
	else:
		self.iface_ext.send_ip_packet(RST_packet)

    def calc_checksum(self, header_size, RST_packet):
	checksum, i = 0
	for i < header_size:
		checksum += struct.unpack('!H', RST_packet[i:i+2])[0]
		i += 2
	if checksum >> 16:
		while checksum >> 16:
			checksum = (checksum >> 16) + (checksum & 0xFFFF)
	checksum = ~checksum
	checksum = struct.unpack('!H', checksum)
	return checksum


# TODO: You may want to add more classes/functions as well.
